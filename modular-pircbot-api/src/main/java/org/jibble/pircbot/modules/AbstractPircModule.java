package org.jibble.pircbot.modules;

import org.jibble.pircbot.ExtendedPircBot;
import org.jibble.pircbot.ReplyConstants;

/**
 * You can extend this class to create a Pirc module that can be added to the
 * bot to enhance its functionalities. A module can override any of the methods
 * declared by this class to react to particular events and do stuff. Typically,
 * you can trigger actions when the bot connects to a server, when a message is
 * received, ...
 * 
 * @author Emmanuel Cron
 */
public abstract class AbstractPircModule {
	
	public void onConnect(ExtendedPircBot bot) {}

	public void onTopic(ExtendedPircBot bot, String channel, String topic, String setBy, long date, boolean changed) {}

	/**
	 * Called when a message is received by the bot on a joined channel.
	 * 
	 * @param bot the current instance of the bot
	 * @param channel the channel to which the message was sent
	 * @param sender the nick of the person who sent the message
	 * @param login the login of the person who sent the message
	 * @param hostname the hostname of the person who sent the message
	 * @param message the actual message sent to the channel
	 */
	public void
			onMessage(ExtendedPircBot bot, String channel, String sender, String login, String hostname, String message) {}
	
	/**
	 * This method is called whenever a private message is sent to the bot.
	 * 
	 * @param bot the current instance of the bot
	 * @param sender the nick of the person who sent the private message
	 * @param login the login of the person who sent the private message
	 * @param hostname the hostname of the person who sent the private message
	 */
	public void onPrivateMessage(ExtendedPircBot bot, String sender, String login, String hostname, String message) {}
	
	/**
	 * This method is called whenever an ACTION is sent from a user. E.g. such
	 * events generated by typing "<tt>/me goes shopping</tt>" in most IRC
	 * clients.
	 * 
	 * @param bot the current instance of the bot
	 * @param sender the nick of the user that sent the action
	 * @param login the login of the user that sent the action
	 * @param hostname the hostname of the user that sent the action
	 * @param target the target of the action, be it a channel or our nick
	 * @param action the action carried out by the user
	 */
	public void onAction(ExtendedPircBot bot, String sender, String login, String hostname, String target, String action) {}

	/**
	 * This method is called when the bot receives a numeric response from the
	 * IRC server.
	 * <p>
	 * Numerics in the range from 001 to 099 are used for client-server
	 * connections only and should never travel between servers. Replies
	 * generated in response to commands are found in the range from 200 to 399.
	 * Error replies are found in the range from 400 to 599.
	 * <p>
	 * You can use the values of {@link ReplyConstants} to identify the meaning
	 * of a particular code.
	 * 
	 * @param bot the current instance of the bot
	 * @param code the three-digit numerical code for the response
	 * @param response the full response from the IRC server
	 */
	public void onServerResponse(ExtendedPircBot bot, int code, String response) {}
	
	public void onJoin(ExtendedPircBot bot, String channel, String sender, String login, String hostname) {}
	
	public void onNickChange(ExtendedPircBot bot, String oldNick, String login, String hostname, String newNick) {}

	public void onPart(ExtendedPircBot bot, String channel, String sender, String login, String hostname) {}
	
	public void onQuit(ExtendedPircBot bot, String sourceNick, String sourceLogin, String sourceHostname, String reason) {}
	
	public void onMode(ExtendedPircBot bot, String channel, String sourceNick, String sourceLogin, String sourceHostname,
			String mode) {}
	
	public void onUserMode(ExtendedPircBot bot, String targetNick, String sourceNick, String sourceLogin,
			String sourceHostname, String mode) {}

	/**
	 * This method is called whenever someone (possibly the bot itself) is
	 * kicked from any of the channels that the bot is in.
	 * 
	 * @param bot the current instance of the bot
	 * @param channel the channel from which the recipient was kicked
	 * @param kickerNick the nick of the user who performed the kick
	 * @param kickerLogin the login of the user who performed the kick
	 * @param kickerHostname the hostname of the user who performed the kick
	 * @param recipientNick the unfortunate recipient of the kick
	 * @param reason the reason given by the user who performed the kick
	 */
	public void onKick(ExtendedPircBot bot, String channel, String kickerNick, String kickerLogin, String kickerHostname,
			String recipientNick, String reason) {}
}
